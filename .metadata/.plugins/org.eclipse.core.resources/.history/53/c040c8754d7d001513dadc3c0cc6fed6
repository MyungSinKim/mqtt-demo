package com.eastsoft.mqtt;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import com.eastsoft.mqtt.model.Payload;
import com.google.gson.Gson;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {

	private TextView resultTv;
	private ImageButton light1Img, light2Img;

	private String host = "tcp://129.1.11.111:1883";
	private String userName = "admin";
	private String passWord = "password";

	private Handler handler;

	private MqttClient client;

	private String myTopic = "sensor";

	private MqttConnectOptions options;

	private ScheduledExecutorService scheduler;
	private MqttTopic topic;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		initConnect();

		handler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				super.handleMessage(msg);

				switch (msg.what) {
				case 1:

					System.out.println("-----------------------------");
					Payload payload = (Payload) msg.obj;
					Toast.makeText(MainActivity.this, payload.toString(),
							Toast.LENGTH_SHORT).show();
					if ("1".equals(payload.getAid())) {
						if ("on".equals(payload.getState())) {
							light1Img
									.setBackgroundResource(R.drawable.light_on);
						} else {
							light1Img
									.setBackgroundResource(R.drawable.light_off);

						}
					} else if ("2".equals(payload.getAid())) {
						if ("on".equals(payload.getState())) {
							light2Img
									.setBackgroundResource(R.drawable.light_on);
						} else {
							light2Img
									.setBackgroundResource(R.drawable.light_off);

						}
					}
					break;
				case 2:
					Toast.makeText(MainActivity.this, "连接成功",
							Toast.LENGTH_SHORT).show();
					try {
						client.subscribe(myTopic, 1);
					} catch (Exception e) {
						e.printStackTrace();
					}
					break;
				case 3:
					Toast.makeText(MainActivity.this, "连接失败，系统正在重连",
							Toast.LENGTH_SHORT).show();
					break;
				default:
					break;
				}

			}
		};

		startReconnect();

	}

	private void initView() {
		resultTv = (TextView) findViewById(R.id.result_tv);
		light1Img = (ImageButton) findViewById(R.id.imageButton1);
		light2Img = (ImageButton) findViewById(R.id.imageButton2);

		light1Img.setOnClickListener(new OnClickListener() {

			public void onClick(View arg0) {
				Payload payload = new Payload();
				payload.setAid("2");
				if ("on".equals(tf2.getText())) {
					payload.setState("off");
				} else {
					payload.setState("on");

				}				
				MqttDeliveryToken token = topic.publish(pub(payload));
				token.waitForCompletion();
				System.out.println(token.isComplete() + "========");
			}
		});
		light2Img.setOnClickListener(new OnClickListener() {

			public void onClick(View arg0) {

			}
		});
	}

	private MqttMessage pub(Payload payload) {
		MqttMessage message = new MqttMessage();
		message.setQos(1);
		message.setRetained(true);
		System.out.println(message.isRetained() + "------ratained状态");
		Gson gson = new Gson();
		String payloadStr = gson.toJson(payload);
		message.setPayload(payloadStr.getBytes());
		return message;
	}

	private void startReconnect() {
		scheduler = Executors.newSingleThreadScheduledExecutor();
		scheduler.scheduleAtFixedRate(new Runnable() {

			public void run() {
				if (!client.isConnected()) {
					connect();
				}
			}
		}, 0 * 1000, 10 * 1000, TimeUnit.MILLISECONDS);
	}

	private void initConnect() {
		try {
			// host为主机名，test为clientid即连接MQTT的客户端ID，一般以客户端唯一标识符表示，MemoryPersistence设置clientid的保存形式，默认为以内存保存
			client = new MqttClient(host, "test", new MemoryPersistence());
			// MQTT的连接设置
			options = new MqttConnectOptions();
			// 设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接
			options.setCleanSession(true);
			// //设置连接的用户名
			// options.setUserName(userName);
			// //设置连接的密码
			// options.setPassword(passWord.toCharArray());
			// 设置超时时间 单位为秒
			options.setConnectionTimeout(10);
			// 设置会话心跳时间 单位为秒 服务器会每隔1.5*20秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制
			options.setKeepAliveInterval(20);
			// 设置回调
			client.setCallback(new MqttCallback() {

				public void connectionLost(Throwable cause) {
					// 连接丢失后，一般在这里面进行重连
					System.out.println("connectionLost----------");
				}

				public void deliveryComplete(IMqttDeliveryToken token) {
					// publish后会执行到这里
					System.out.println("deliveryComplete---------"
							+ token.isComplete());
				}

				public void messageArrived(String topicName, MqttMessage message)
						throws Exception {
					// subscribe后得到的消息会执行到这里面
					System.out.println("messageArrived----------"
							+ message.toString());
					Message msg = new Message();
					msg.what = 1;
					// msg.obj = topicName + "---" + message.toString();
					Gson gson = new Gson();
					Payload payload = (Payload) gson.fromJson(
							message.toString(), Payload.class);
					msg.obj = payload;
					handler.sendMessage(msg);
				}

			});
			// connect();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void connect() {
		new Thread(new Runnable() {

			public void run() {
				try {
					client.connect(options);
					Message msg = new Message();
					msg.what = 2;
					handler.sendMessage(msg);
				} catch (Exception e) {
					e.printStackTrace();
					Message msg = new Message();
					msg.what = 3;
					handler.sendMessage(msg);
				}
			}
		}).start();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (client != null && keyCode == KeyEvent.KEYCODE_BACK) {
			try {
				client.disconnect();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return super.onKeyDown(keyCode, event);
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		try {
			scheduler.shutdown();
			client.disconnect();
		} catch (MqttException e) {
			e.printStackTrace();
		}
	}
}
